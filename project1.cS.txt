// For importing questions and participants file please write the whole file path withouth the " at the begining and the end.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <unistd.h>
#include <pthread.h>
#include <stdbool.h>

#define MAX_QUESTIONS 50
#define MAX_PARTICIPANTS 100
#define MAX_STRING 500
#define TIMER_DURATION 20  // seconds

// Fixed prize amounts
int prizes[6] = {0, 20000, 100000, 250000, 500000, 1000000};

// Current prize pool (for display)
int globalPrizePool = 0;
// Timer flag and pause flag for timer thread
bool time_up = false;
volatile bool pause_timer = false;

typedef struct {
    char type[MAX_STRING];
    int difficulty;
    char question[MAX_STRING];
    char options[4][MAX_STRING];
    char correctAnswer;
} Question;

typedef struct {
    char name[MAX_STRING];
    char birthdate[MAX_STRING];
    char phone[MAX_STRING];
    char address[MAX_STRING];
    int score;
} Participant;

typedef struct {
    char category[MAX_STRING];
    int correct, incorrect;
} CategoryStats;

CategoryStats globalStats[MAX_QUESTIONS];
int globalStatsCount = 0;

// Prototypes
void show_menu();
void load_questions(Question q[], int *qc, char *file);
void load_participants(Participant p[], int *pc, char *file);
void play_game(Question q[], int qc, Participant p[], int *pc, char *file);
void show_statistics(Participant p[], int pc);
void save_participant(Participant p, char *file);
void *timer_thread(void *arg);
void print_question_stats(Question q[], int qc);
void update_global_category_stats(const char *cat, bool correct);

int main() {
    show_menu();
    return 0;
}

void show_menu() {
    Question questions[MAX_QUESTIONS];
    Participant participants[MAX_PARTICIPANTS];
    int question_count = 0, participant_count = 0;
    char question_file[MAX_STRING] = "questions.txt";
    char participant_file[MAX_STRING] = "participants.txt";
    int choice;

    while (1) {
        printf("\n===== Who Wants to Be a Millionaire? =====\n"
               "1. Load Questions\n"
               "2. Load Participants\n"
               "3. Start Game\n"
               "4. Show Statistics\n"
               "5. Exit\n"
               "Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            printf("Invalid input.\n");
            while (getchar() != '\n');
            continue;
        }
        getchar(); // eat newline
        switch (choice) {
            case 1:
                printf("Enter question file name: ");
                fgets(question_file, MAX_STRING, stdin);
                question_file[strcspn(question_file, "\n")] = 0;
                load_questions(questions, &question_count, question_file);
                print_question_stats(questions, question_count);
                break;
            case 2:
                printf("Enter participant file name: ");
                fgets(participant_file, MAX_STRING, stdin);
                participant_file[strcspn(participant_file, "\n")] = 0;
                load_participants(participants, &participant_count, participant_file);
                printf("Loaded %d participants.\n", participant_count);
                break;
            case 3:
                play_game(questions, question_count, participants, &participant_count, participant_file);
                break;
            case 4:
                show_statistics(participants, participant_count);
                break;
            case 5:
                printf("Exiting...\n");
                return;
            default:
                printf("Invalid choice.\n");
        }
    }
}

void load_questions(Question questions[], int *question_count, char question_file[]) {
    FILE *file = fopen(question_file, "r");
    if (!file) {
        printf("No question data found. A new file will be created.\n");
        return;
    }
    *question_count = 0;
    char line[MAX_STRING * 4];
    while (*question_count < MAX_QUESTIONS && fgets(line, sizeof(line), file)) {
        line[strcspn(line, "\n")] = 0;
        if (strlen(line) < 5) continue;
        Question *q = &questions[*question_count];
        int offset = 0;
        if (sscanf(line, "%s %d %n", q->type, &q->difficulty, &offset) != 2) {
            printf("Failed to parse type/difficulty: %s\n", line);
            continue;
        }
        char *rest = line + offset;
        char *fq = strchr(rest, '\"');
        if (!fq) {
            printf("Failed to find options: %s\n", line);
            continue;
        }
        int qlen = fq - rest;
        strncpy(q->question, rest, qlen);
        q->question[qlen] = 0;
        for (int i = qlen - 1; i >= 0; i--)
            if (isspace(q->question[i])) q->question[i] = 0; else break;
        if (sscanf(fq, " \"%[^\"]\" \"%[^\"]\" \"%[^\"]\" \"%[^\"]\" %c",
                   q->options[0], q->options[1], q->options[2], q->options[3], &q->correctAnswer) != 5) {
            printf("Failed to parse options/answer: %s\n", line);
            continue;
        }
        (*question_count)++;
    }
    fclose(file);
    printf("Questions loaded successfully! Total: %d\n", *question_count);
}

void load_participants(Participant participants[], int *participant_count, char participant_file[]) {
    FILE *file = fopen(participant_file, "r");
    if (!file) {
        printf("No participant data found. A new file will be created.\n");
        return;
    }
    *participant_count = 0;
    char line[MAX_STRING * 2];
    while (*participant_count < MAX_PARTICIPANTS && fgets(line, sizeof(line), file)) {
        line[strcspn(line, "\n")] = 0;
        if (strlen(line) < 5) continue;
        Participant *p = &participants[*participant_count];
        int cnt = sscanf(line, "\"%[^\"]\" \"%[^\"]\" \"%[^\"]\" \"%[^\"]\" %d",
                         p->name, p->birthdate, p->phone, p->address, &p->score);
        if (cnt == 5) (*participant_count)++;
        else printf("Failed to parse line: %s\n", line);
    }
    fclose(file);
    printf("Participants loaded successfully! Total: %d\n", *participant_count);
}

void save_participant(Participant p, char participant_file[]) {
    FILE *f = fopen(participant_file, "a");
    if (!f) {
        printf("Failed to save participant data.\n");
        return;
    }
    fprintf(f, "\"%s\" \"%s\" \"%s\" \"%s\" %d\n",
        p.name, p.birthdate, p.phone, p.address, p.score);
    fclose(f);
    printf("Participant data saved successfully.\n");
}

void print_question_stats(Question questions[], int question_count) {
    char cats[MAX_QUESTIONS][MAX_STRING];
    int counts[MAX_QUESTIONS] = {0}, ccount = 0;
    int diff_counts[10] = {0};

    for (int i = 0; i < question_count; i++) {
        int found = 0;
        for (int j = 0; j < ccount; j++) {
            if (strcmp(cats[j], questions[i].type) == 0) {
                counts[j]++; 
                found = 1; 
                break;
            }
        }
        if (!found) {
            strcpy(cats[ccount], questions[i].type);
            counts[ccount++] = 1;
        }
        int d = questions[i].difficulty;
        if (d >= 1 && d < 10) diff_counts[d]++;
    }

    printf("\n=== Question Category Statistics ===\n");
    for (int i = 0; i < ccount; i++)
        printf("Category '%s': %d question(s)\n", cats[i], counts[i]);

    printf("\n=== Question Difficulty Statistics ===\n");
    for (int d = 1; d < 10; d++)
        if (diff_counts[d])
            printf("Difficulty %d: %d question(s)\n", d, diff_counts[d]);
}

void update_global_category_stats(const char *category, bool correct) {
    for (int i = 0; i < globalStatsCount; i++) {
        if (strcmp(globalStats[i].category, category) == 0) {
            if (correct)
                globalStats[i].correct++;
            else         
                globalStats[i].incorrect++;
            return;
        }
    }
    strcpy(globalStats[globalStatsCount].category, category);
    globalStats[globalStatsCount].correct   = correct ? 1 : 0;
    globalStats[globalStatsCount].incorrect = correct ? 0 : 1;
    globalStatsCount++;
}

void show_statistics(Participant participants[], int participant_count) {
    if (participant_count == 0) {
        printf("\nNo participant data available.\n");
        return;
    }
    printf("\n=== Game Statistics ===\n");
    printf("Total Participants: %d\n", participant_count);

    Participant *top = &participants[0];
    for (int i = 1; i < participant_count; i++)
        if (participants[i].score > top->score)
            top = &participants[i];
    printf("Most Successful: %s with $%d\n", top->name, top->score);

    char best[MAX_STRING] = "", worst[MAX_STRING] = "";
    int bc = 0, wc = 0;
    for (int i = 0; i < globalStatsCount; i++) {
        if (globalStats[i].correct > bc) {
            bc = globalStats[i].correct;
            strcpy(best, globalStats[i].category);
        }
        if (globalStats[i].incorrect > wc) {
            wc = globalStats[i].incorrect;
            strcpy(worst, globalStats[i].category);
        }
    }
    printf("Category best: %s (%d correct)\n", best, bc);
    printf("Category worst: %s (%d incorrect)\n", worst, wc);

    // Improved age calculation using sscanf and current year
    int age_groups[3] = {0}, correct_sum[3] = {0};
    for (int i = 0; i < participant_count; i++) {
        int day, month, year;
        // Assume the birthdate is given in "dd/mm/yyyy" format.
        if (sscanf(participants[i].birthdate, "%d/%d/%d", &day, &month, &year) != 3) {
            printf("Incorrect birthdate format for participant: %s\n", participants[i].name);
            continue;
        }
        // Get the current year dynamically.
        time_t current_time = time(NULL);
        struct tm *tm_info = localtime(&current_time);
        int currentYear = tm_info->tm_year + 1900;
        int age = currentYear - year;

        // Determine the number of correct answers based on the prize won.
        int corr = 0;
        for (int d = 1; d <= 5; d++)
            if (participants[i].score == prizes[d])
                corr = d;

        // Categorize: <=30, 31–50, >50.
        int idx = (age <= 30 ? 0 : age <= 50 ? 1 : 2);
        age_groups[idx]++;
        correct_sum[idx] += corr;
    }
    printf("\nAverage correct answers per age group:\n");
    printf("<=30: %.2f\n", age_groups[0] ? (double)correct_sum[0] / age_groups[0] : 0.0);
    printf("31–50: %.2f\n", age_groups[1] ? (double)correct_sum[1] / age_groups[1] : 0.0);
    printf(">50: %.2f\n", age_groups[2] ? (double)correct_sum[2] / age_groups[2] : 0.0);

    char cities[MAX_PARTICIPANTS][MAX_STRING];
    int counts[MAX_PARTICIPANTS] = {0}, ccount = 0;
    for (int i = 0; i < participant_count; i++) {
        char city[MAX_STRING];
        sscanf(participants[i].address, "%s", city);
        int found = 0;
        for (int j = 0; j < ccount; j++) {
            if (strcmp(cities[j], city) == 0) {
                counts[j]++; 
                found = 1; 
                break;
            }
        }
        if (!found) {
            strcpy(cities[ccount], city);
            counts[ccount++] = 1;
        }
    }
    char topcity[MAX_STRING] = "";
    int tc = 0;
    for (int i = 0; i < ccount; i++) {
        if (counts[i] > tc) {
            tc = counts[i];
            strcpy(topcity, cities[i]);
        }
    }
    printf("Top city: %s (%d participants)\n", topcity, tc);

    printf("\nAll participants:\n");
    for (int i = 0; i < participant_count; i++) {
        printf("%d. %s - $%d\n", i + 1, participants[i].name, participants[i].score);
    }
}

void *timer_thread(void *arg) {
    int dur = *((int*)arg);
    for (int i = dur; i > 0; i--) {
        if (time_up)
            return NULL;
        if (pause_timer) {
            sleep(1);
            i++; // remain on the same count while paused
            continue;
        }
        sleep(1);
        // Move up two lines to overwrite "Time left"
        printf("\033[2A");
        printf("\r| Time left: %-3d sec  |\n", i - 1);
        // Move back down one line below the box
        printf("\033[1B");
        fflush(stdout);
    }
    time_up = true;
    printf("\nTime's up! Game over.\n");
    exit(0);
}

void play_game(Question questions[], int question_count,
               Participant participants[], int *participant_count,
               char participant_file[]) {
    if (question_count == 0) {
        printf("No questions loaded.\n");
        return;
    }

    Participant np;
    printf("\nEnter your details:\n");
    printf("Name: ");      
    fgets(np.name, MAX_STRING, stdin);      
    np.name[strcspn(np.name, "\n")] = 0;
    printf("Birthdate (dd/mm/yyyy): "); 
    fgets(np.birthdate, MAX_STRING, stdin); 
    np.birthdate[strcspn(np.birthdate, "\n")] = 0;
    printf("Phone: ");     
    fgets(np.phone, MAX_STRING, stdin);    
    np.phone[strcspn(np.phone, "\n")] = 0;
    printf("City: ");      
    fgets(np.address, MAX_STRING, stdin);  
    np.address[strcspn(np.address, "\n")] = 0;

    bool lifeline50_available = true, doubleDip_available = true;
    int winnings = 0;
    srand(time(NULL));

    for (int diff = 1; diff <= 5; diff++) {
        // select category & question...
        char desired[MAX_STRING];
        Question *qptr = NULL;
        char cats[MAX_QUESTIONS][MAX_STRING];
        int ccount = 0;
        for (int i = 0; i < question_count; i++) {
            if (questions[i].difficulty == diff) {
                bool found = false;
                for (int j = 0; j < ccount; j++)
                    if (strcmp(cats[j], questions[i].type) == 0) { 
                        found = true; 
                        break; 
                    }
                if (!found)
                    strcpy(cats[ccount++], questions[i].type);
            }
        }
        if (ccount == 0) {
            printf("No Q for difficulty %d. Skipping.\n", diff);
            continue;
        }
        printf("\nAvailable categories for level %d:\n", diff);
        for (int i = 0; i < ccount; i++)
            printf(" - %s\n", cats[i]);
        while (!qptr) {
            printf("Choose category: ");
            fgets(desired, MAX_STRING, stdin);
            desired[strcspn(desired, "\n")] = 0;
            int matches[MAX_QUESTIONS], m = 0;
            for (int i = 0; i < question_count; i++) {
                if (questions[i].difficulty == diff &&
                    strcmp(questions[i].type, desired) == 0)
                    matches[m++] = i;
            }
            if (m == 0)
                printf("No match. Try again.\n");
            else 
                qptr = &questions[matches[rand() % m]];
        }

        printf("\nThis question is worth $%d.\n", prizes[diff]);
        printf("Press 1 for 50%% lifeline, 2 for Double Dip, or A/B/C/D to answer.\n");
        if (!lifeline50_available)
            printf("50%% lifeline not available.\n");
        if (!doubleDip_available)
            printf("Double Dip not available.\n");
        
        // option to walk away
        char c;
        printf("Continue (C) or Stop (S) for $%d? ", winnings);
        scanf(" %c", &c); 
        getchar();
        if (toupper(c) == 'S') {
            printf("You walk away with $%d.\n", winnings);
            break;
        }

        // display Q
        printf("\nQ: %s\n", qptr->question);
        for (int i = 0; i < 4; i++)
            printf("  %c) %s\n", 'A' + i, qptr->options[i]);

        // print box once
        globalPrizePool = prizes[diff];
        printf("+-----------------------+\n");
        printf("| Prize pool: $%-8d |\n", globalPrizePool);
        printf("| Time left: %-3d sec  |\n", TIMER_DURATION);
        printf("+-----------------------+\n");

        // start timer
        pthread_t timer;
        time_up = false;
        int td = TIMER_DURATION;
        pthread_create(&timer, NULL, timer_thread, &td);

        // input loop
        bool answered = false, correct = false;
        bool used50 = false, usedDD = false;
        char firstAns = 0;

        while (!answered && !time_up) {
            int ch = getchar();
            if (ch == EOF)
                continue;
            ch = toupper(ch);
            if (ch == '\n' || ch == ' ')
                continue;

                if (ch == '1' && lifeline50_available) {
                    // Pause timer during lifeline display.
                    pause_timer = true;
                    lifeline50_available = false;
                    used50 = true;
                    int ci = toupper(qptr->correctAnswer) - 'A';
                    int wrong[3], wc = 0;
                    for (int i = 0; i < 4; i++)
                        if (i != ci) wrong[wc++] = i;
                    int keep = wrong[rand() % wc];
    
                    printf("\n\n50%% lifeline: remaining options:\n");
                    for (int i = 0; i < 4; i++) {
                        if (i == ci || i == keep)
                            printf("  %c) %s\n", 'A' + i, qptr->options[i]);
                        else
                            printf("  %c) *********\n", 'A' + i);
                    }
                    printf("\n");
                    fflush(stdout);
    
                    // un‑pause timer
                    pause_timer = false;
    
                    // *** NEW: re‑print the full prize/timer box to fix display ***
                    printf("+-----------------------+\n");
                    printf("| Prize pool: $%-8d |\n", globalPrizePool);
                    printf("| Time left: %-3d sec  |\n", TIMER_DURATION);
                    printf("+-----------------------+\n");
    
                    continue;
                }
    
                
            if (ch == '2' && doubleDip_available) {
                doubleDip_available = false;
                usedDD = true;
                printf("\nDouble Dip activated. You get two chances to answer.\n");
            
                // *** NEW: re‑print the full prize/timer box to fix display ***
                printf("+-----------------------+\n");
                printf("| Prize pool: $%-8d |\n", globalPrizePool);
                printf("| Time left: %-3d sec  |\n", TIMER_DURATION);
                printf("+-----------------------+\n");
            
                printf("Enter your first answer: ");
                continue;
            }
            
            if (ch >= 'A' && ch <= 'D') {
                if (used50 && usedDD) {
                    correct = true;
                    answered = true;
                    break;
                }
                if (usedDD) {
                    if (!firstAns) {
                        firstAns = ch;
                        if (ch == toupper(qptr->correctAnswer)) {
                            correct = true;
                            answered = true;
                        } else {
                            printf("Wrong. One more attempt: ");
                        }
                    } else {
                        if (ch == toupper(qptr->correctAnswer))
                            correct = true;
                        answered = true;
                    }
                } else {
                    correct = (ch == toupper(qptr->correctAnswer));
                    answered = true;
                }
            }
        }

        time_up = true;
        pthread_join(timer, NULL);

        if (!answered) {
            printf("\nTime expired! Game over.\n");
            exit(0);
        }

        if (correct) {
            printf("Correct! You win $%d\n", prizes[diff]);
            winnings = prizes[diff];
            update_global_category_stats(qptr->type, true);
        } else {
            printf("Wrong! The correct answer was %c: %s\n",
                   toupper(qptr->correctAnswer),
                   qptr->options[toupper(qptr->correctAnswer) - 'A']);
            update_global_category_stats(qptr->type, false);
            if (diff <= 2)
                winnings = 0;
            else if (diff <= 4)
                winnings = prizes[2];
            else
                winnings = prizes[4];
            break;
        }
    }

    printf("\nGame over. You won $%d!\n", winnings);
    np.score = winnings;
    save_participant(np, participant_file);
    load_participants(participants, participant_count, participant_file);
}
